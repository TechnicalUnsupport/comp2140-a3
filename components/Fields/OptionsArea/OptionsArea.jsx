import { StyleSheet, Text, TouchableOpacity, View } from 'react-native'
import React, { useEffect, useState } from 'react'
import { FlatList, Switch, TextInput } from 'react-native-gesture-handler';
import { Picker } from '@react-native-picker/picker';
import DropDownCard from './DropDownCard';
import DropDownOption from './DropDownOption';

const FIELDS_OPTIONS = {
  text:{
    label:'Text',
    field_type:'text',
    options:{
      inputMode:'none',
      keyboardType:'default',
      maxLength:100
    },
    options_enum:{
      inputMode:['none','text','decimal','numeric','tel','email','url'],
      keyboardType:['default','number-pad','decimal-pad','numeric','email-address','phone-pad','url']
    }
  },
  multiline:{
    label:'Multiline',
    field_type:'multiline',
    options:{
      inputMode:'none',
      keyboardType:'default',
      maxLength:250,
      numberOfLines:4
    },
    options_enum:{
      inputMode:['none','text','decimal','numeric'],
      keyboardType:['default','number-pad','decimal-pad','numeric']
    }
  },
  dropdown:{
    label:'Dropdown',
    field_type:'dropdown',
    options:{
      values:[],
      selectedValue:'',
    } // generated by user
  },
  location:{
    label:'Location',
    field_type:'location',
    options:{} // generated by user
  }
}



const OptionsArea = ({field,changeField}) => {

  // to ensure options display correctly
  const sanitizeText = (fld) => {
    const N_inputMode = ['decimal','numeric','tel'];
    const N_keyboardType = ['number-pad','decimal-pad','numeric','phone-pad'];
    
    return {
      inputMode:fld.options_enum.inputMode.filter(o=>
        field.is_num
        ? N_inputMode.includes(o)
        : !N_inputMode.includes(o)
      ),
      keyboardType:fld.options_enum.keyboardType
      .filter(o=>
        field.options.inputMode === 'email' 
        ? o === 'email-address'
        : o !== 'email-address'
      )
      .filter(o=>
        field.is_num
        ? N_keyboardType.includes(o)
        : !N_keyboardType.includes(o)
      )
    }
  }

  switch (field.field_type) {
    case 'text':
      return (
        <View style={styles.container}>
          <View style={styles.switchView}>
            <Text style={styles.switchTxt}>required? </Text>
            <Switch
              style={styles.switch}
              trackColor={{false:'grey',true:'#5a42f5'}}
              thumbColor={field.required ? '#4331b8ff' : '#f4f3f4'}
              onValueChange={() => changeField({
                ...field,
                required:!field.required
              })}
              value={field.required}
            />
          </View>

          <View style={styles.switchView}>
            <Text style={styles.switchTxt}>stores numeric values? </Text>
            <Switch
              style={styles.switch}
              trackColor={{false:'grey',true:'#5a42f5'}}
              thumbColor={field.is_num ? '#4331b8ff' : '#f4f3f4'}
              onValueChange={()=> changeField({
                ...field,
                is_num:!field.is_num
              })}
              value={field.is_num}
            />
          </View>

          <View style={styles.textInputView} >
            <Text style={{fontWeight:500,marginTop:'5%'}} >max length</Text>
            <TextInput 
              style={styles.textIn}
              onChangeText={text=>changeField({
                ...field,
                options:{
                  ...field.options,
                  maxLength:text
                }
              })}
              value={field.options.maxLength}
              placeholder='max length'
              inputMode='numeric'
              keyboardType='number-pad'
            />
          </View>

          <View style={styles.dropdownView}>
            <Text style={{fontWeight:500}}>input mode</Text>
            <View style={styles.pickerView}>
              <Picker
                style={styles.pickerTxt}
                onValueChange={item=>changeField({
                  ...field,
                  options:{
                    ...field.options,
                    inputMode:item
                  }
                })}
              >
                {sanitizeText(FIELDS_OPTIONS.text)
                .inputMode
                .map(f=>(
                  <Picker.Item 
                    label={f}
                    value={f}
                  />
                ))}

              </Picker>
            </View>
          </View>

          <View style={styles.dropdownView}>
            <Text style={{fontWeight:500}}>keyboard type</Text>
            <View style={styles.pickerView}>
              <Picker
                style={styles.pickerTxt}
                onValueChange={item=>changeField({
                  ...field,
                  options:{
                    ...field.options,
                    keyboardType:item
                  }
                })}
              >
                {sanitizeText(FIELDS_OPTIONS.text)
                .keyboardType
                .map(f=>(
                  <Picker.Item 
                    label={f}
                    value={f}
                  />
                ))}

              </Picker>
            </View>
          </View>

        </View>
      );
    
    case 'multiline':
      return (
        <View style={styles.container}>
          <View style={styles.switchView}>
            <Text style={styles.switchTxt}>required? </Text>
            <Switch
              style={styles.switch}
              trackColor={{false:'grey',true:'#5a42f5'}}
              thumbColor={field.required ? '#4331b8ff' : '#f4f3f4'}
              onValueChange={() => changeField({
                ...field,
                required:!field.required
              })}
              value={field.required}
            />
          </View>

          <View style={styles.switchView}>
            <Text style={styles.switchTxt}>stores numeric values? </Text>
            <Switch
              style={styles.switch}
              trackColor={{false:'grey',true:'#5a42f5'}}
              thumbColor={field.is_num ? '#4331b8ff' : '#f4f3f4'}
              onValueChange={()=> changeField({
                ...field,
                is_num:!field.is_num
              })}
              value={field.is_num}
            />
          </View>

          <View style={styles.textInputView} >
            <Text style={{fontWeight:500,marginTop:'5%'}} >max length</Text>
            <TextInput 
              style={styles.textIn}
              onChangeText={text=>changeField({
                ...field,
                options:{
                  ...field.options,
                  maxLength:text
                }
              })}
              value={field.options.maxLength}
              placeholder='max length'
              inputMode='numeric'
              keyboardType='number-pad'
            />
          </View>

          <View style={styles.textInputView} >
            <Text style={{fontWeight:500,marginTop:'5%'}} >number of lines</Text>
            <TextInput 
              style={styles.textIn}
              onChangeText={text=>changeField({
                ...field,
                options:{
                  ...field.options,
                  numberOfLines:text
                }
              })}
              value={field.options.numberOfLines}
              placeholder='number of lines'
              inputMode='numeric'
              keyboardType='number-pad'
            />
          </View>

          <View style={styles.dropdownView}>
            <Text style={{fontWeight:500}}>input mode</Text>
            <View style={styles.pickerView}>
              <Picker
                style={styles.pickerTxt}
                onValueChange={item=>changeField({
                  ...field,
                  options:{
                    ...field.options,
                    inputMode:item
                  }
                })}
              >
                {sanitizeText(FIELDS_OPTIONS.multiline)
                .inputMode
                .map(f=>(
                  <Picker.Item 
                    label={f}
                    value={f}
                  />
                ))}

              </Picker>
            </View>
          </View>

          <View style={styles.dropdownView}>
            <Text style={{fontWeight:500}}>keyboard type</Text>
            <View style={styles.pickerView}>
              <Picker
                style={styles.pickerTxt}
                onValueChange={item=>changeField({
                  ...field,
                  options:{
                    ...field.options,
                    keyboardType:item
                  }
                })}
              >
                {sanitizeText(FIELDS_OPTIONS.multiline)
                .keyboardType
                .map(f=>(
                  <Picker.Item 
                    label={f}
                    value={f}
                  />
                ))}

              </Picker>
            </View>
          </View>

        </View>
      );
    
    case 'dropdown': return <DropDownOption field={field} changeField={changeField} />;
    case 'location':
      return (
        <View style={styles.container}>
          <View style={styles.switchView}>
            <Text style={styles.switchTxt}>required? </Text>
            <Switch
              style={styles.switch}
              trackColor={{false:'grey',true:'#5a42f5'}}
              thumbColor={field.required ? '#4331b8ff' : '#f4f3f4'}
              onValueChange={() => changeField({
                ...field,
                required:!field.required
              })}
              value={field.required}
            />
          </View>

          <View style={styles.switchView}>
            <Text style={styles.switchTxt}>stores numeric values? </Text>
            <Switch
              style={styles.switch}
              trackColor={{false:'grey',true:'#5a42f5'}}
              thumbColor={field.is_num ? '#4331b8ff' : '#f4f3f4'}
              onValueChange={()=> changeField({
                ...field,
                is_num:!field.is_num
              })}
              value={field.is_num}
            />
          </View>
        </View>
      );
    default: 
      return (<Text>an error occurred</Text>);
  }
}

export default OptionsArea

const styles = StyleSheet.create({
  container:{
    flex:0,
    width:'100%'
  },
  switchView:{
    flex:0,
    flexDirection:'row',
    alignSelf:'flex-start',
    alignItems:'center',
    justifyContent:'baseline',
    // padding:'1%',
    width:'100%',
    // backgroundColor:'red'
  },
  switch:{
    alignSelf:'flex-end'
    
  },
  switchTxt:{
    fontSize:16,
    marginRight:'2%',
    fontWeight:400,
    textAlign:'left',
    width:'80%',
    // alignSelf:'flex-start'
  },
  pickerView:{
    borderColor:'grey',
    borderWidth:1,
    borderRadius:25,
    width:'80%',
    margin:10,
    alignSelf:'flex-start'
  },
  pickerTxt:{
    color:'grey'
  },
  textInputView:{

  },
  textIn:{
    borderColor:'grey',
    borderWidth:1,
    borderRadius:25,
    width:'80%',
    padding:'5%',
    margin:10,
    alignSelf:'flex-start'
  },
  
})