import { Pressable, StyleSheet, Text, TouchableOpacity, View } from 'react-native'
import React, { useState } from 'react'
import { Switch, TextInput } from 'react-native-gesture-handler'
import {Picker} from '@react-native-picker/picker';
import { apiRequest } from '../../api/app';
import OptionsArea from './OptionsArea/OptionsArea';

// helpers
const upperFirst = (str) => str.charAt(0).toUpperCase() + str.slice(1);

const FIELDS_ENUM = [
  "text",
  "multiline",
  "dropdown",
  "location"
]

const FIELDS = [
  {
    label:'Text',
    field_type:'text',
    options:{
      inputMode:'none',
      keyboardType:'default',
      maxLength:100
    },
    options_enum:{
      inputMode:['none','text','decimal','numeric','tel','search','email','url'],
      keyboardType:['default','number-pad','decimal-pad','numeric','email-address','phone-pad','url']
    }
  },
  {
    label:'Multiline',
    field_type:'multiline',
    options:{
      inputMode:'none',
      keyboardType:'default',
      maxLength:250,
      numberOfLines:4
    },
    options_enum:{
      inputMode:['none','text','decimal','numeric','tel','search','email','url'],
      keyboardType:['default','number-pad','decimal-pad','numeric','email-address','phone-pad','url']
    }
  },
  {
    label:'Dropdown',
    field_type:'dropdown',
    options:{} // generated by user
  },
  {
    label:'Location',
    field_type:'location',
    options:{
      longitude:0,
      latitude:0
    } // generated by user
  }
]


const AddForm = ({props}) => {
  const [field,setField] = useState({
    form_id:props.fid,
    name:'',
    field_type:'text',
    required:false,
    is_num:false,
    order_index:props.oidx,
    options:{}
  })


  const saveFunction = async () =>{
    if (field.name == '' || field.field_type == '') return;
    if ((
      field.field_type === 'text' 
      || field.field_type === 'multiline')
      && (!('maxLength' in field.options)) 
    ) return;
    try {
      const f = await apiRequest(`/field`,'POST',field);
    } catch (err) { 
      console.error('could not update field',err);
    }
    props.toggleState();
  }



  return (
    <View style={styles.container}>
      <Text style={styles.labelTxt}>Field name:</Text>
      <TextInput 
        style={styles.txtIn}
        onChangeText={text=> setField({
          ...field,
          name:text
        })}
        value={field.name}
        placeholder='Field name...'
      />
      <Text style={styles.labelTxt}>Field type:</Text>
      <View style={styles.dropDown}>
        <Picker 
          style={styles.pickerTxt}
          onValueChange={item=>setField({
            ...field,
            field_type:item
          })}
        >
          {FIELDS.map(field=>(
            <Picker.Item 
              label={field.label}
              value={field.field_type}
            />))}
        </Picker>
      </View>

      <Text style={styles.labelTxt}>Options:</Text>
      <OptionsArea field={field} changeField={fld=>setField(fld)}/>
      <View style={styles.actionView}>
        <TouchableOpacity
          style={styles.actionBtn}
          onPress={()=>props.toggleState()}
        >
          <Text style={styles.cancelBtnTxt}>Cancel</Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={{...styles.actionBtn,borderColor:'#4a42f5'}}
          onPress={()=>saveFunction()}
        >
          <Text style={styles.saveBtnTxt}>save</Text>
        </TouchableOpacity>
      </View>
    
    </View>
  )
}
export default AddForm

const styles = StyleSheet.create({
  container:{
    flex:0,
    flexDirection:'column',
    justifyContent:'center',
    alignItems:'center',
    width:'100%',
    padding:'5%',
  },
  labelTxt:{
    fontSize:18,
    fontWeight:500,
    marginTop:'3%',
    alignSelf:'flex-start'
  },
  actionView:{
    flex:0,
    justifyContent:'center',
    alignItems:'center',
    flexDirection:'row',
    width:'100%',
    // height:100
  },
  actionBtn:{
    borderWidth:1,
    borderColor:'red',
    borderRadius:25,
    width:'35%',
    padding:'3%',
    marginLeft:'5%',
    marginRight:'5%'

  },
  cancelBtnTxt:{color:'red',textAlign:'center'},
  saveBtnTxt:{color:'#4a42f5',textAlign:'center'},
  txtIn:{
    borderColor:'grey',
    borderWidth:1,
    borderRadius:25,
    width:'80%',
    padding:'5%',
    margin:10,
    alignSelf:'flex-start'
  },
  dropDown:{
    borderColor:'grey',
    borderWidth:1,
    borderRadius:25,
    width:'80%',
    margin:10,
    alignSelf:'flex-start'
  },
  pickerTxt:{
    color:'grey'
  },
  
})
// work TODO: fix styling of switches 